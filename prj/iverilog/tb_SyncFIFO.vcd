$date
	Fri Aug 04 00:49:12 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_SyncFIFO $end
$var wire 4 ! rddata [3:0] $end
$var wire 1 " full $end
$var wire 1 # empty $end
$var reg 1 $ rden $end
$var reg 1 % sys_clk $end
$var reg 1 & sys_rst_n $end
$var reg 4 ' wrdata [3:0] $end
$var reg 1 ( wren $end
$var integer 32 ) i [31:0] $end
$scope module u_SyncFIFO $end
$var wire 1 * asrst $end
$var wire 1 % clk $end
$var wire 1 $ rden $end
$var wire 4 + wrdata [3:0] $end
$var wire 1 ( wren $end
$var wire 1 " full $end
$var wire 1 # empty $end
$var reg 5 , cnt [4:0] $end
$var reg 4 - rddata [3:0] $end
$var reg 4 . rdptr [3:0] $end
$var reg 4 / wrptr [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 /
b0 .
b0 -
b0 ,
b0 +
1*
bx )
0(
b0 '
0&
1%
0$
1#
0"
b0 !
$end
#5
0%
#10
1%
#15
0%
#20
1%
#21
0*
1&
#25
0%
#30
1%
#35
0%
#40
1%
#41
b0 )
1(
#45
0%
#50
b1 /
0#
b1 ,
1%
#51
b1 '
b1 +
b1 )
#55
0%
#60
b10 ,
b10 /
1%
#61
b10 '
b10 +
b10 )
#65
0%
#70
b11 /
b11 ,
1%
#71
b11 '
b11 +
b11 )
#75
0%
#80
b100 ,
b100 /
1%
#81
b100 '
b100 +
b100 )
#85
0%
#90
b101 /
b101 ,
1%
#91
b101 '
b101 +
b101 )
#95
0%
#100
b110 ,
b110 /
1%
#101
b110 '
b110 +
b110 )
#105
0%
#110
b111 /
b111 ,
1%
#111
b111 '
b111 +
b111 )
#115
0%
#120
b1000 ,
b1000 /
1%
#121
b1000 '
b1000 +
b1000 )
#125
0%
#130
b1001 /
b1001 ,
1%
#131
b1001 '
b1001 +
b1001 )
#135
0%
#140
1"
b1010 ,
b0 /
1%
#141
b1010 )
#145
0%
#150
1%
#155
0%
#160
1%
#161
1$
0(
#165
0%
#170
b1 .
0"
b1001 ,
1%
#175
0%
#180
b1000 ,
b10 .
b1 !
b1 -
1%
#185
0%
#190
b11 .
b10 !
b10 -
b111 ,
1%
#195
0%
#200
b110 ,
b100 .
b11 !
b11 -
1%
#205
0%
#210
b101 .
b100 !
b100 -
b101 ,
1%
#215
0%
#220
b100 ,
b110 .
b101 !
b101 -
1%
#225
0%
#230
b111 .
b110 !
b110 -
b11 ,
1%
#235
0%
#240
b10 ,
b1000 .
b111 !
b111 -
1%
#245
0%
#250
b1001 .
b1000 !
b1000 -
b1 ,
1%
#255
0%
#260
1#
b0 ,
b0 .
b1001 !
b1001 -
1%
#265
0%
#270
1%
#275
0%
#280
1%
#281
b0 '
b0 +
b0 )
0$
1(
#285
0%
#290
b1 /
0#
b1 ,
1%
#291
b1 '
b1 +
b1 )
#295
0%
#300
b10 ,
b10 /
1%
#301
b10 '
b10 +
b10 )
#305
0%
#310
b11 /
b11 ,
1%
#311
b11 '
b11 +
b11 )
#315
0%
#320
b100 ,
b100 /
1%
#321
b100 '
b100 +
b100 )
#325
0%
#330
b101 /
b101 ,
1%
#331
b101 '
b101 +
b101 )
#335
0%
#340
b110 ,
b110 /
1%
#341
b110 '
b110 +
b110 )
#345
0%
#350
b111 /
b111 ,
1%
#351
b111 '
b111 +
b111 )
#355
0%
#360
b1000 ,
b1000 /
1%
#361
b1000 '
b1000 +
b1000 )
#365
0%
#370
b1001 /
b1001 ,
1%
#371
b1001 '
b1001 +
b1001 )
#375
0%
#380
1"
b1010 ,
b0 /
1%
#381
b1010 )
#385
0%
#390
1%
#395
0%
#400
1%
#401
1$
0(
#405
0%
#410
b1 .
b0 !
b0 -
0"
b1001 ,
1%
#415
0%
#420
b1000 ,
b10 .
b1 !
b1 -
1%
#425
0%
#430
b11 .
b10 !
b10 -
b111 ,
1%
#435
0%
#440
b110 ,
b100 .
b11 !
b11 -
1%
#445
0%
#450
b101 .
b100 !
b100 -
b101 ,
1%
#451
b0 '
b0 +
b0 )
1(
#455
0%
#460
b1 /
b110 .
b101 !
b101 -
1%
#461
b1 '
b1 +
b1 )
#465
0%
#470
b111 .
b110 !
b110 -
b10 /
1%
#471
b10 '
b10 +
b10 )
#475
0%
#480
b11 /
b1000 .
b111 !
b111 -
1%
#481
b11 '
b11 +
b11 )
#485
0%
#490
b1001 .
b1000 !
b1000 -
b100 /
1%
#491
b100 '
b100 +
b100 )
#495
0%
#500
b101 /
b0 .
b1001 !
b1001 -
1%
#501
b101 '
b101 +
b101 )
#505
0%
#510
b1 .
b0 !
b0 -
b110 /
1%
#511
b110 '
b110 +
b110 )
#515
0%
#520
b111 /
b10 .
b1 !
b1 -
1%
#521
b111 '
b111 +
b111 )
#525
0%
#530
b11 .
b10 !
b10 -
b1000 /
1%
#531
b1000 '
b1000 +
b1000 )
#535
0%
#540
b1001 /
b100 .
b11 !
b11 -
1%
#541
b1001 '
b1001 +
b1001 )
#545
0%
#550
b101 .
b100 !
b100 -
b0 /
1%
#551
0(
b1010 )
#555
0%
#560
b100 ,
b110 .
b101 !
b101 -
1%
#565
0%
#570
b111 .
b110 !
b110 -
b11 ,
1%
#575
0%
#580
b10 ,
b1000 .
b111 !
b111 -
1%
#585
0%
#590
b1001 .
b1000 !
b1000 -
b1 ,
1%
#595
0%
#600
1#
b0 ,
b0 .
b1001 !
b1001 -
1%
#605
0%
#610
1%
#615
0%
#620
1%
#625
0%
#630
1%
#635
0%
#640
1%
#645
0%
#650
1%
#655
0%
#660
1%
#665
0%
#670
1%
#675
0%
#680
1%
#685
0%
#690
1%
#695
0%
#700
1%
#705
0%
#710
1%
#715
0%
#720
1%
#725
0%
#730
1%
#735
0%
#740
1%
#745
0%
#750
1%
#751
